Data Scientist Role Play: Profiling and Analyzing the Yelp Dataset Coursera Worksheet

This is a 2-part assignment. In the first part, you are asked a series of questions that will help you profile and understand the data just like a data scientist would. For this first part of the assignment, you will be assessed both on the correctness of your findings, as well as the code you used to arrive at your answer. You will be graded on how easy your code is to read, so remember to use proper formatting and comments where necessary.

In the second part of the assignment, you are asked to come up with your own inferences and analysis of the data for a particular research question you want to answer. You will be required to prepare the dataset for the analysis you choose to do. As with the first part, you will be graded, in part, on how easy your code is to read, so use proper formatting and comments to illustrate and communicate your intent as required.

For both parts of this assignment, use this "worksheet." It provides all the questions you are being asked, and your job will be to transfer your answers and SQL coding where indicated into this worksheet so that your peers can review your work. You should be able to use any Text Editor (Windows Notepad, Apple TextEdit, Notepad ++, Sublime Text, etc.) to copy and paste your answers. If you are going to use Word or some other page layout application, just be careful to make sure your answers and code are lined appropriately.
In this case, you may want to save as a PDF to ensure your formatting remains intact for you reviewer.



Part 1: Yelp Dataset Profiling and Understanding

1. Profile the data by finding the total number of records for each of the tables below:
	
i. Attribute table = 10,000
ii. Business table = 10,000
iii. Category table = 10,000
iv. Checkin table = 10,000
v. elite_years table = 10,000
vi. friend table = 10,000
vii. hours table = 10,000
viii. photo table = 10,000
ix. review table = 10,000
x. tip table = 10,000
xi. user table = 10,000



	

2. Find the total distinct records by either the foreign key or primary key for each table. If two foreign keys are listed in the table, please specify which foreign key.

i. Business = 10,000
ii. Hours = 1562
iii. Category = 2643
iv. Attribute = 1115
v. Review = 10,000
vi. Checkin = 493
vii. Photo = 10,000
viii. Tip = 3979 (business_id)
ix. User = 10,000
x. Friend = 11 (user_id)
xi. Elite_years = 2780 (user_id)


SELECT COUNT(DISTINCT user_id) AS count
FROM elite_years


Note: Primary Keys are denoted in the ER-Diagram with a yellow key icon.	



3. Are there any columns with null values in the Users table? Indicate "yes," or "no."

	Answer: No
	
	
	SQL code used to arrive at answer:

	SELECT *
	FROM user
	WHERE id IS NULL
      		OR name IS NULL
      		OR review_count IS NULL
      		OR yelping_since IS NULL
      		OR useful IS NULL
      		OR funny IS NULL
      		OR cool IS NULL
      		OR fans IS NULL
      		OR average_stars IS NULL
      		OR compliment_hot IS NULL
      		OR compliment_more IS NULL
      		OR compliment_profile IS NULL
      		OR compliment_cute IS NULL
      		OR compliment_list IS NULL
      		OR compliment_note IS NULL
      		OR compliment_plain IS NULL
      		OR compliment_cool IS NULL
      		OR compliment_funny IS NULL
      		OR compliment_writer IS NULL
      		OR compliment_photos IS NULL
	
	

	
4. For each table and column listed below, display the smallest (minimum), largest (maximum), and average (mean) value for the following fields:

	i. Table: Review, Column: Stars
	
		min: 1		max: 5		avg: 3.7082 
		
	SELECT 
	MIN(stars)
	, MAX(stars)
	, AVG(stars)
	FROM review
	
	ii. Table: Business, Column: Stars
	
		min: 1		max: 5		avg: 3.6549
		
	
	iii. Table: Tip, Column: Likes
	
		min: 0		max: 2		avg: 0.0144
	
	
	iv. Table: Checkin, Column: Count
	
		min: 1		max: 53		avg: 1.9414
		

	v. Table: User, Column: Review_count
	
		min: 0		max: 2000	avg: 24.2995
	
	SELECT 
	MIN(review_count)
	, MAX(review_count)
	, AVG(review_count)
	FROM user
		


5. List the cities with the most reviews in descending order:

	SQL code used to arrive at answer:

	SELECT 
	business.city
	, SUM(business.review_count)
	FROM business
	GROUP BY business.city
	ORDER BY SUM(business.review_count) DESC
	
	Copy and Paste the Result Below:
+-----------------+----------------------------+
| city            | SUM(business.review_count) |
+-----------------+----------------------------+
| Las Vegas       |                      82854 |
| Phoenix         |                      34503 |
| Toronto         |                      24113 |
| Scottsdale      |                      20614 |
| Charlotte       |                      12523 |
| Henderson       |                      10871 |
| Tempe           |                      10504 |
| Pittsburgh      |                       9798 |
| Montréal        |                       9448 |
| Chandler        |                       8112 |
| Mesa            |                       6875 |
| Gilbert         |                       6380 |
| Cleveland       |                       5593 |
| Madison         |                       5265 |
| Glendale        |                       4406 |
| Mississauga     |                       3814 |
| Edinburgh       |                       2792 |
| Peoria          |                       2624 |
| North Las Vegas |                       2438 |
| Markham         |                       2352 |
| Champaign       |                       2029 |
| Stuttgart       |                       1849 |
| Surprise        |                       1520 |
| Lakewood        |                       1465 |
| Goodyear        |                       1155 |
+-----------------+----------------------------+
(Output limit exceeded, 25 of 362 total rows shown)
	
6. Find the distribution of star ratings to the business in the following cities:

i. Avon

SQL code used to arrive at answer:

SELECT 
business.stars
, SUM(business.review_count) as review_count
FROM business
WHERE business.city = 'Avon'
GROUP BY business.stars

Copy and Paste the Resulting Table Below (2 columns â€“ star rating and count):
+-------+--------------+
| stars | review_count |
+-------+--------------+
|   1.5 |           10 |
|   2.5 |            6 |
|   3.5 |           88 |
|   4.0 |           21 |
|   4.5 |           31 |
|   5.0 |            3 |
+-------+--------------+

ii. Beachwood

SQL code used to arrive at answer:

SELECT 
business.stars
, SUM(business.review_count) AS review_count
FROM business
WHERE business.city = 'Beachwood'
GROUP BY business.stars


Copy and Paste the Resulting Table Below (2 columns â€“ star rating and count):
+-------+--------------+
| stars | review_count |
+-------+--------------+
|   2.0 |            8 |
|   2.5 |            3 |
|   3.0 |           11 |
|   3.5 |            6 |
|   4.0 |           69 |
|   4.5 |           17 |
|   5.0 |           23 |
+-------+--------------+


7. Find the top 3 users based on their total number of reviews:
		
	SQL code used to arrive at answer:

	SELECT 
	user.name
	, user.review_count
	FROM user
	ORDER BY user.review_count DESC
	LIMIT 3

		
	Copy and Paste the Result Below:
+--------+--------------+
| name   | review_count |
+--------+--------------+
| Gerald |         2000 |
| Sara   |         1629 |
| Yuri   |         1339 |
+--------+--------------+		


8. Does posing more reviews correlate with more fans?

	Please explain your findings and interpretation of the results:
	No.
	I ran the following SQL command to eyeball the correlation between number of reviews and number of fans. There seems to be no strong correlation as the user with the second most number of reviews (1629 reviews) has the same number of fans with another user with only 675 reviews. 

	SELECT 
	user.review_count
	, user.fans
	FROM user
	ORDER BY review_count DESC


+--------------+------+
| review_count | fans |
+--------------+------+
|         2000 |  253 |
|         1629 |   50 |
|         1339 |   76 |
|         1246 |  101 |
|         1215 |  126 |
|         1153 |  311 |
|         1116 |   16 |
|         1039 |  104 |
|          968 |  497 |
|          930 |  173 |
|          904 |   38 |
|          864 |   43 |
|          862 |  124 |
|          861 |  115 |
|          842 |   85 |
|          836 |   37 |
|          834 |  120 |
|          813 |  159 |
|          775 |   61 |
|          754 |   78 |
|          702 |   35 |
|          696 |   10 |
|          694 |  101 |
|          676 |   25 |
|          675 |   45 |
+--------------+------+
(Output limit exceeded, 25 of 10000 total rows shown)


	
9. Are there more reviews with the word "love" or with the word "hate" in them?

	Answer: yes

	
	SQL code used to arrive at answer:
	
	SELECT 
	'Love_review' AS Type
	, COUNT(*) AS Count
	FROM review
	WHERE text LIKE '%love%'
	UNION 
	SELECT 
	'Hate_review'
	, COUNT(*) 
	FROM review
	WHERE text LIKE '%hate%'

+-------------+-------+
| Type        | Count |
+-------------+-------+
| Hate_review |   232 |
| Love_review |  1780 |
+-------------+-------+

	
	
10. Find the top 10 users with the most fans:

	SQL code used to arrive at answer:
	SELECT	
	name
	, fans
	FROM user
	ORDER BY fans DESC
	LIMIT 10
	
	
	Copy and Paste the Result Below:
+-----------+------+
| name      | fans |
+-----------+------+
| Amy       |  503 |
| Mimi      |  497 |
| Harald    |  311 |
| Gerald    |  253 |
| Christine |  173 |
| Lisa      |  159 |
| Cat       |  133 |
| William   |  126 |
| Fran      |  124 |
| Lissa     |  120 |
+-----------+------+
	
		

Part 2: Inferences and Analysis

1. Pick one city and category of your choice and group the businesses in that city or category by their overall star rating. Compare the businesses with 2-3 stars to the businesses with 4-5 stars and answer the following questions. Include your code.
	
i. Do the two groups you chose to analyze have a different distribution of hours?

SKIPPED



ii. Do the two groups you chose to analyze have a different number of reviews?
Restaurants in Toronto with 4-5 stars receive a higher number of reviews than those with 2-3 stars as indicated in the below query output.
+---------+-------------+-------------+---------------+
| city    | category    | star_rating | total_reviews |
+---------+-------------+-------------+---------------+
| Toronto | Restaurants | 2-3         |            86 |
| Toronto | Restaurants | 4-5         |           206 |
+---------+-------------+-------------+---------------+

-- review the distribution of reviews received by Toronto-based restaurants with 2-3 stars and 4-5 stars
SELECT
business.city AS city
, category.category AS category
, '4-5' AS star_rating
, SUM(business.review_count) AS total_reviews
FROM (category INNER JOIN business ON category.business_id = business.id)
WHERE business.city = 'Toronto'
      AND category.category = 'Restaurants'
      AND business.stars BETWEEN 4 AND 5
UNION
SELECT
business.city AS city
, category.category AS category
, '2-3' AS star_rating
, SUM(business.review_count)
FROM (category INNER JOIN business ON category.business_id = business.id)
WHERE business.city = 'Toronto'
      AND category.category = 'Restaurants'
      AND business.stars BETWEEN 2 AND 3
         
iii. Are you able to infer anything from the location data provided between these two groups? Explain.

There is no clear relationship between postal code and business rating as indicated in the below query output.
+---------+-------------+-------------+-------------+
| city    | category    | star_rating | postal_code |
+---------+-------------+-------------+-------------+
| Toronto | Restaurants | 2-3         | M4B 2L9     |
| Toronto | Restaurants | 2-3         | M5B 2E5     |
| Toronto | Restaurants | 2-3         | M5H 1X6     |
| Toronto | Restaurants | 4-5         | M2N 5R6     |
| Toronto | Restaurants | 4-5         | M5V         |
| Toronto | Restaurants | 4-5         | M6C 1B6     |
| Toronto | Restaurants | 4-5         | M6P 1A6     |
| Toronto | Restaurants | 4-5         | M9A 1C2     |
+---------+-------------+-------------+-------------+

SQL code used for analysis:

-- review the distribution of reviews received by Toronto-based restaurants with 2-3 stars and 4-5 stars
SELECT
business.city AS city
, category.category AS category
, '4-5' AS star_rating
, business.postal_code AS postal_code
FROM (category INNER JOIN business ON category.business_id = business.id)
WHERE business.city = 'Toronto'
      AND category.category = 'Restaurants'
      AND business.stars BETWEEN 4 AND 5
UNION
SELECT
business.city AS city
, category.category AS category
, '2-3' AS star_rating
, business.postal_code
FROM (category INNER JOIN business ON category.business_id = business.id)
WHERE business.city = 'Toronto'
      AND category.category = 'Restaurants'
      AND business.stars BETWEEN 2 AND 3

		
		
2. Group business based on the ones that are open and the ones that are closed. What differences can you find between the ones that are still open and the ones that are closed? List at least two differences and the SQL code you used to arrive at your answer.
		
i. Difference 1:
The number of busineses that are still open (is_open = 1) is approximately 3 times those that are closed as indicated in the query output below. 
+---------+----------------+
| is_open | business_count |
+---------+----------------+
|       0 |            122 |
|       1 |            574 |
+---------+----------------+

-- compare the number of businesses tha are still open to those that are closed
SELECT
business.is_open
, COUNT(business.id) AS business_count                      
FROM business INNER JOIN category ON business.id = category.business_id
GROUP BY 
  business.is_open


         
ii. Difference 2:
Businesses that are still open (is_open = 1) has a slight higher average star rating and significantly more reviews as indicated in the query output below.
         
+---------+-----------------+------------------+
| is_open | avg_star_rating | avg_review_count |
+---------+-----------------+------------------+
|       0 |   3.52039473684 |    23.1980263158 |
|       1 |   3.67900943396 |    31.7570754717 |
+---------+-----------------+------------------+

-- review all businesses based on whether it is still open (1 for open, 0 for closed), average star rating, and average review count
SELECT
business.is_open
, AVG(business.stars) AS avg_star_rating
, AVG(review_count) AS avg_review_count
FROM business
GROUP BY business.is_open
         
        
	
	
3. For this last part of your analysis, you are going to choose the type of analysis you want to conduct on the Yelp dataset and are going to prepare the data for analysis.

Ideas for analysis include: Parsing out keywords and business attributes for sentiment analysis, clustering businesses to find commonalities or anomalies between them, predicting the overall star rating for a business, predicting the number of fans a user will have, and so on. These are just a few examples to get you started, so feel free to be creative and come up with your own problem you want to solve. Provide answers, in-line, to all of the following:
	
i. Indicate the type of analysis you chose to do:
Examine the correlation between years of being an elite member and the number of reviews posted by that person. The objective of this analysis is to examine the effectiveness and the Yelp Elite program in engaging its users measured by the number of reviews posted.      

Because Yelp business model relies heavily on adversiting revenue, it's important to find creative ways to engage its users on the site.
         
ii. Write 1-2 brief paragraphs on the type of data you will need for your analysis and why you chose that data:
Data required for this analysis can be found int the 'user' and 'elite_years' table. This data can be later plugged into a data analysis tool such as Excel or RStudio for regression analysis.                            
                  
iii. Output of your finished dataset:
The below dataset seems to indicate that elite members are generally active, evidenced by the high number of reviews they've posted. Further analysis can be performed on this dataset. 

+---------------------------+--------------+
| elite_membership_duration | review_count |
+---------------------------+--------------+
|                        11 |          834 |
|                        10 |          904 |
|                        10 |          834 |
|                         9 |          332 |
|                         9 |           70 |
|                         9 |          904 |
|                         9 |          836 |
|                         9 |          834 |
|                         8 |          503 |
|                         8 |          332 |
|                         8 |          476 |
|                         8 |          228 |
|                         8 |          156 |
|                         8 |           70 |
|                         8 |          904 |
|                         8 |          136 |
|                         8 |          836 |
|                         8 |          834 |
|                         7 |          503 |
|                         7 |          182 |
|                         7 |          332 |
|                         7 |          476 |
|                         7 |          228 |
|                         7 |          156 |
|                         7 |           70 |
+---------------------------+--------------+
(Output limit exceeded, 25 of 85 total rows shown)

         
         
iv. Provide the SQL code you used to create your final dataset:

-- examine the correlation between years of being an elite member and the number of reviews posted by that person
SELECT
2020 - CAST(elite_years.year as integer) as elite_membership_duration
, user.review_count
FROM user INNER JOIN elite_years ON user.id = elite_years.user_id
ORDER BY 2020 - CAST(elite_years.year as integer) DESC